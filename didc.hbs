//! Bindings to a canister, generated by `cargo xtask bind`
//!
//! Binding configuration: `didc.toml`
//!
//! Adapted from: <https://github.com/dfinity/candid/blob/master/rust/candid_parser/src/bindings/rust_call.hbs>
#![allow(dead_code, unused_imports, clippy::all, clippy::missing_errors_doc)]
use candid::{self, CandidType, Deserialize, Principal};
use ic_cdk::call::{Call, CallResult};
{{#if submodule}}
/// Manually maintained methods
pub mod {{submodule}};
{{/if}}

{{type_defs}}

{{#if methods}}
pub struct Service(pub Principal);
impl Service {
  {{#each methods}}
  pub async fn {{this.original_name}}(&self{{#each this.args}}, {{this.0}}: &{{this.1}}{{/each}}) -> CallResult<{{#each this.rets}}{{this}}{{/each}}> {
    Ok(Call::unbounded_wait(self.0, "{{escape_debug this.original_name}}")
    .with_args(&({{#each this.args}}{{this.0}},{{/each}})).await?.candid()?)
  }
  {{/each}}
}
{{#if canister_id}}
pub const CANISTER_ID : Principal = Principal::from_slice(&[{{principal_slice canister_id}}]); // {{canister_id}}
pub const SERVICE : Service = Service(CANISTER_ID);
{{/if}}
{{/if}}
{{#if tests}}
{{tests}}
{{/if}}
